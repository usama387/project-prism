generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String         @id @default(uuid())
  username       String         @unique
  name           String?
  createdAt      DateTime       @default(now())
  settings       UserSettings?
  projects       Project[]
  tasks          Task[]
  taskHistories  TaskHistory[]
  categories     Category[]
  transactions   Transaction[]
  monthHistories MonthHistory[]
  yearHistories  YearHistory[]
}

model UserSettings {
  userId   String @id @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency String
}

model Project {
  id                 String    @id @default(uuid())
  name               String
  description        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientSatisfaction Float?
  startDate          DateTime?
  deadline           DateTime?
  tasks              Task[]
  budgetId           String?
  status             String    @default("ONGOING")
  priority           String    @default("Medium")
  budget             Int?
  usedBudget         Int?
  numberOfTasks      Int       @default(0)
  completedTasks     Int       @default(0)
}

model Task {
  id             String        @id @default(uuid())
  name           String
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId      String
  project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status         String        @default("Ongoing")
  priority       String        @default("Medium")
  dueDate        DateTime?
  assignedTo     String?
  estimatedHours Float?
  actualHours    Float?
  dependencyId   String?       @unique
  dependency     Task?         @relation(name: "TaskDependencies", fields: [dependencyId], references: [id])
  dependentOnId  String?       @unique
  dependentOn    Task?         @relation(name: "TaskDependencies")
  riskFlag       Boolean       @default(false)
  TaskHistory    TaskHistory[]
}

model TaskHistory {
  id            String    @id @default(uuid())
  taskId        String
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  version       String
  dueDate       DateTime?
  assignedTo    String?
  hoursConsumed Float?
  changes       String
  status        String    @default("Ongoing")
  priority      String    @default("Medium")
  updatedBy     String
  updatedAt     DateTime?
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  icon      String
  type      String   @default("income")

  @@unique([name, userId, type])
}

model Transaction {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  amount       Float
  description  String
  date         DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String   @default("income")
  category     String
  categoryIcon String
}

model MonthHistory {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([day, month, year, userId])
}

model YearHistory {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([month, year, userId])
}
